import { Container, Graphics, Text, TextStyle } from 'pixi.js'
import { DialogueElement } from '../../../types/assembly'
import { applyCenteringUniversal, calculateOptimalWrapWidth, createOptimalTextStyle } from '../utils/TextCenteringUtils'

/**
 * √âditeur de texte 100% natif PixiJS pour les bulles de dialogue
 * Aucun √©l√©ment HTML - tout se passe dans PixiJS
 *
 * LOGIQUE D'INTERACTION :
 * - Double-clic sur bulle ‚Üí Entre en mode √©dition
 * - Clic dans la bulle ‚Üí Reste en mode √©dition (positionne le curseur)
 * - Clic EXT√âRIEUR √† la bulle ‚Üí Sort du mode √©dition
 * - Escape ‚Üí Sort du mode √©dition
 * - Apr√®s sortie : Clic simple = manipulation, Double-clic = √©dition
 */
// ‚úÖ VARIABLE GLOBALE POUR √âVITER LES √âDITEURS MULTIPLES
let activeEditor: NativeTextEditor | null = null

export class NativeTextEditor extends Container {
  private element: DialogueElement
  private originalText: Text
  private editableText!: Text
  private textCursor!: Graphics // Renomm√© pour √©viter conflit avec Container.cursor
  private background!: Graphics
  private selectionHighlight?: Graphics // Highlight visuel pour la s√©lection
  private onComplete: (text: string) => void

  private currentText: string = ''
  private cursorPosition: number = 0
  private isActive: boolean = false
  private cursorBlinkTimer: number = 0
  private autoSaveTimer: number = 0
  private keyboardListener?: (e: KeyboardEvent) => void
  private clickListener?: (e: MouseEvent) => void
  private gracePeriodEnd: number = 0 // P√©riode de gr√¢ce pour √©viter fermeture imm√©diate
  private lastBubbleSize: { width: number; height: number } = { width: 0, height: 0 } // Surveillance du redimensionnement
  private resizeWatcher: number = 0 // Timer pour surveiller les changements de taille
  private selectionStart: number = 0 // D√©but de la s√©lection
  private selectionEnd: number = 0 // Fin de la s√©lection
  private isSelecting: boolean = false // Flag pour la s√©lection en cours
  private hasSelection: boolean = false // Flag pour la s√©lection active
  private lastClickTime: number = 0 // Pour d√©tecter les double-clics
  private isClickingInText: boolean = false // Flag pour √©viter la sortie d'√©dition
  private maxLineWidth: number = 200 // Largeur maximale d'une ligne pour le wrapping manuel

  constructor(
    element: DialogueElement,
    originalText: Text,
    onComplete: (text: string) => void
  ) {
    super()

    console.log('üî§ CR√âATION NativeTextEditor pour:', element.id, '√âditeur actuel:', activeEditor?.element.id || 'aucun')
    console.trace('üîç Stack trace de cr√©ation:')

    this.element = element
    this.originalText = originalText
    this.onComplete = onComplete

    // ‚úÖ GESTION UNIFI√âE DU TEXTE - Distinguer placeholder du contenu r√©el
    this.currentText = this.getActualText()
    this.cursorPosition = this.currentText.length

    // ‚úÖ SYST√àME DE S√âLECTION STANDARD (SANS HIGHLIGHT VISUEL D√âFAILLANT)

    this.createEditor()
  }

  /**
   * Obtient le texte r√©el (pas le placeholder)
   */
  private getActualText(): string {
    const text = this.element.text || ''
    // Si c'est le placeholder par d√©faut, consid√©rer comme vide
    if (text === 'Nouveau texte...' || text === '') {
      return ''
    }
    return text
  }

  private createEditor(): void {
    const { width, height } = this.element.transform
    const padding = 10

    // ‚úÖ INTERFACE VISUELLE MINIMALE - PAS DE CADRE OU ARRI√àRE-PLAN VISIBLE
    // L'√©dition se fait directement sur le texte sans √©l√©ments visuels perturbateurs

    // ‚úÖ TEXTE √âDITABLE AVEC WRAPPING MANUEL PR√âCIS
    const displayText = this.currentText || ''

    // Calculer la largeur disponible pour le texte (bulle - marges)
    const textMargin = 20 // Marge de 20px de chaque c√¥t√©
    this.maxLineWidth = Math.max(50, width - (textMargin * 2))

    // ‚úÖ CR√âER LE TEXTE AVEC STYLE OPTIMAL POUR LE CENTRAGE RADICAL
    const optimalStyle = createOptimalTextStyle(
      this.element.bubbleStyle.fontSize,
      this.element.bubbleStyle.fontFamily,
      this.element.bubbleStyle.textColor,
      width,
      height
    )

    this.editableText = new Text({
      text: displayText,
      style: optimalStyle
    })

    // ‚úÖ CENTRER LE TEXTE D√àS LA CR√âATION
    this.centerTextPerfectly()
    this.addChild(this.editableText)

    console.log('üéØ Texte cr√©√© avec centrage automatique:', {
      bubbleSize: { width, height },
      textPosition: { x: this.editableText.x, y: this.editableText.y },
      anchor: this.editableText.anchor
    })

    // ‚úÖ RENDRE LE TEXTE INTERACTIF AVEC PRIORIT√â MAXIMALE
    this.editableText.eventMode = 'static'
    this.editableText.cursor = 'text' // Curseur en forme de I-beam
    this.editableText.interactive = true
    this.editableText.interactiveChildren = false // Emp√™cher les enfants d'intercepter
    this.editableText.zIndex = 1000 // Priorit√© maximale

    console.log('‚úÖ Texte √©ditable configur√© comme interactif:', {
      eventMode: this.editableText.eventMode,
      interactive: this.editableText.interactive,
      zIndex: this.editableText.zIndex,
      cursor: this.editableText.cursor
    })

    // √âv√©nements avec capture imm√©diate et logs de debug
    this.editableText.on('pointerdown', (e) => {
      console.log('üñ±Ô∏è POINTERDOWN sur texte √©ditable d√©tect√©')
      e.stopPropagation()
      e.stopImmediatePropagation()
      this.handleTextClick(e)
    })
    this.editableText.on('pointermove', (e) => {
      console.log('üñ±Ô∏è POINTERMOVE sur texte √©ditable d√©tect√©')
      e.stopPropagation()
      e.stopImmediatePropagation()
      this.handleTextMove(e)
    })
    this.editableText.on('pointerup', (e) => {
      console.log('üñ±Ô∏è POINTERUP sur texte √©ditable d√©tect√©')
      e.stopPropagation()
      e.stopImmediatePropagation()
      this.handleTextRelease(e)
    })
    this.editableText.on('pointerover', () => {
      console.log('üñ±Ô∏è POINTEROVER sur texte √©ditable')
      this.handleTextHover()
    })
    this.editableText.on('pointerout', () => {
      console.log('üñ±Ô∏è POINTEROUT sur texte √©ditable')
      this.handleTextOut()
    })

    // ‚úÖ SUPPRESSION DE LA PROTECTION GLOBALE QUI CAUSE DES PROBL√àMES
    // Plus de capture globale sur l'√©diteur - seul le texte capture les √©v√©nements

    // ‚úÖ CURSEUR CLIGNOTANT ADAPTATIF
    this.textCursor = new Graphics()
    this.textCursor.rect(0, 0, 2, this.element.bubbleStyle.fontSize)
    this.textCursor.fill({ color: this.element.bubbleStyle.textColor })
    this.addChild(this.textCursor)

    // ‚úÖ SYST√àME DE S√âLECTION STANDARD (PAS DE HIGHLIGHT VISUEL)

    // ‚úÖ CENTRER LE TEXTE AU D√âBUT DE L'√âDITION
    this.centerTextPerfectly()

    // ‚úÖ POSITIONNER LE CURSEUR
    this.updateCursorPosition()

    console.log('‚úÖ √âdition d√©marr√©e avec texte centr√©')
  }

  public startEditing(): void {
    // ‚úÖ EMP√äCHER LES √âDITEURS MULTIPLES
    if (activeEditor && activeEditor !== this) {
      console.log('üö´ √âditeur d√©j√† actif - fermeture de l\'ancien')
      activeEditor.finishEditing()
    }

    activeEditor = this
    this.isActive = true

    // ‚úÖ D√âSACTIVER LA MANIPULATION DES BULLES PENDANT L'√âDITION
    this.disableBubbleManipulation()

    // ‚úÖ S√âLECTION STANDARD DE TOUT LE TEXTE EXISTANT
    if (this.currentText.length > 0) {
      // S√©lectionner tout le texte existant (comportement standard)
      this.selectionStart = 0
      this.selectionEnd = this.currentText.length
      this.hasSelection = true
      this.cursorPosition = this.currentText.length
      console.log('üî§ Texte existant s√©lectionn√©:', this.currentText)
    } else {
      this.hasSelection = false
      this.cursorPosition = 0
      console.log('üî§ Bulle vide - pr√™t pour nouveau texte')
    }

    // ‚úÖ P√âRIODE DE GR√ÇCE : Ignorer les clics pendant 300ms pour √©viter fermeture imm√©diate
    this.gracePeriodEnd = Date.now() + 300

    // ‚úÖ INITIALISER LA SURVEILLANCE DU REDIMENSIONNEMENT
    this.lastBubbleSize = {
      width: this.element.transform.width,
      height: this.element.transform.height
    }
    this.startResizeWatcher()

    // ‚úÖ √âCOUTER LES √âV√âNEMENTS CLAVIER
    this.keyboardListener = (e: KeyboardEvent) => this.handleKeyboard(e)
    window.addEventListener('keydown', this.keyboardListener)

    // ‚úÖ GESTIONNAIRE DE CLIC EXT√âRIEUR INTELLIGENT
    this.clickListener = (e: MouseEvent) => this.handleGlobalClick(e)
    window.addEventListener('click', this.clickListener, true)

    console.log('‚úÖ Gestionnaire de clic ext√©rieur activ√© - Sortie seulement si clic en dehors de la bulle')

    // ‚úÖ D√âMARRER L'ANIMATION DU CURSEUR
    this.startCursorBlink()

    // ‚úÖ FORCER LE CURSEUR TEXTE PENDANT TOUTE L'√âDITION
    this.forceTextCursor()

    console.log('üî§ √âdition native d√©marr√©e - manipulation des bulles d√©sactiv√©e')
  }

  private handleKeyboard(e: KeyboardEvent): void {
    if (!this.isActive) return

    // ‚úÖ NE PAS BLOQUER TOUS LES √âV√âNEMENTS - Seulement ceux qu'on g√®re
    const handledKeys = ['Enter', 'Escape', 'Backspace', 'Delete', 'ArrowLeft', 'ArrowRight', 'Home', 'End', 'Tab']
    const isHandledKey = handledKeys.includes(e.key) || (e.key.length === 1 && !e.ctrlKey && !e.altKey && !e.metaKey)

    if (isHandledKey) {
      e.preventDefault()
      e.stopPropagation()
    }

    switch (e.key) {
      case 'Enter':
        // ‚úÖ ENTR√âE = NOUVELLE LIGNE (COMPORTEMENT STANDARD POUR MANGA)
        this.insertText('\n')
        break

      case 'Escape':
        // ‚úÖ ESCAPE = TERMINE L'√âDITION ET D√âS√âLECTIONNE (IDENTIQUE AU CLIC EXT√âRIEUR)
        console.log('‚å®Ô∏è Escape press√© - Fin d\'√©dition ET d√©s√©lection (identique au clic ext√©rieur)')
        this.finishEditingAndDeselect()
        break

      // case 'Tab':
      //   this.finishEditing()
      //   break

      case 'Backspace':
        this.deleteCharacter()
        break

      case 'Delete':
        this.deleteCharacterForward()
        break

      case 'ArrowLeft':
        this.moveCursor(-1)
        break

      case 'ArrowRight':
        this.moveCursor(1)
        break

      case 'Home':
        this.clearSelection() // D√©sactiver la s√©lection
        this.cursorPosition = 0
        this.updateCursorPosition()
        break

      case 'End':
        this.clearSelection() // D√©sactiver la s√©lection
        this.cursorPosition = this.currentText.length
        this.updateCursorPosition()
        break

      default:
        // ‚úÖ OP√âRATIONS DE PRESSE-PAPIERS STANDARD
        if (e.ctrlKey || e.metaKey) {
          switch (e.key.toLowerCase()) {
            case 'c':
              this.copySelectedText()
              break
            case 'v':
              this.pasteText()
              break
            case 'x':
              this.cutSelectedText()
              break
            case 'a':
              this.selectAllText()
              break
            default:
              console.log('üö´ Raccourci clavier non g√©r√©:', e.key)
          }
        } else if (e.key.length === 1) {
          // ‚úÖ CARACT√àRES NORMAUX
          console.log('üî§ Insertion du caract√®re:', `"${e.key}"`, 'Texte avant:', `"${this.currentText}"`)
          this.insertText(e.key)
        } else {
          console.log('üö´ Caract√®re ignor√©:', e.key, 'Longueur:', e.key.length)
        }
        break
    }
  }

  private handleGlobalClick(e: MouseEvent): void {
    // ‚úÖ P√âRIODE DE GR√ÇCE : Ignorer les clics pendant les premiers 300ms
    if (Date.now() < this.gracePeriodEnd) {
      console.log('üõ°Ô∏è Clic ignor√© pendant la p√©riode de gr√¢ce')
      return
    }

    // ‚úÖ V√âRIFIER QUE LE CLIC EST DANS LE CANVAS
    const canvas = document.querySelector('canvas')
    if (!canvas) return

    const rect = canvas.getBoundingClientRect()
    const canvasX = e.clientX - rect.left
    const canvasY = e.clientY - rect.top

    // ‚úÖ IGNORER LES CLICS EN DEHORS DU CANVAS
    if (canvasX < 0 || canvasY < 0 || canvasX > rect.width || canvasY > rect.height) {
      console.log('üö´ Clic en dehors du canvas - ignor√©')
      return
    }

    // ‚úÖ OBTENIR LA POSITION EXACTE DE LA BULLE
    const bubbleContainer = this.parent?.parent // Container de la bulle
    if (!bubbleContainer) {
      console.log('‚ùå Container de bulle non trouv√© - Fin d\'√©dition par s√©curit√©')
      this.finishEditingAndDeselect()
      return
    }

    // Calculer les bounds globaux de la bulle avec une TR√àS GRANDE marge de s√©curit√©
    const globalBounds = bubbleContainer.getBounds()
    const margin = 50 // TR√àS GRANDE marge de 50px pour √©viter TOUTE sortie accidentelle

    const bubbleArea = {
      x: globalBounds.x - margin,
      y: globalBounds.y - margin,
      width: globalBounds.width + (margin * 2),
      height: globalBounds.height + (margin * 2)
    }

    const isInsideBubbleArea =
      canvasX >= bubbleArea.x &&
      canvasX <= bubbleArea.x + bubbleArea.width &&
      canvasY >= bubbleArea.y &&
      canvasY <= bubbleArea.y + bubbleArea.height

    console.log('üéØ D√©tection de clic:', {
      clic: { x: canvasX, y: canvasY },
      bubbleArea,
      isInside: isInsideBubbleArea,
      canvasBounds: { width: rect.width, height: rect.height }
    })

    // ‚úÖ SEULS LES CLICS VRAIMENT EXT√âRIEURS TERMINENT L'√âDITION
    if (!isInsideBubbleArea) {
      console.log('üö™ Clic VRAIMENT EXT√âRIEUR - Fin d\'√©dition ET d√©s√©lection')
      this.finishEditingAndDeselect()
    } else {
      console.log('üè† Clic dans la zone de bulle - √âDITION CONTINUE')
      // ‚úÖ AUCUNE ACTION - L'√©dition continue sans interruption
      // Les clics √† l'int√©rieur de la bulle ne font JAMAIS sortir du mode √©dition
    }
  }

  private insertText(char: string): void {
    console.log('üî§ D√âBUT insertText:', { char, currentText: this.currentText, cursorPosition: this.cursorPosition })

    this.ensureSelectionConsistency() // V√©rifier la coh√©rence avant insertion

    // ‚úÖ SI DU TEXTE EST S√âLECTIONN√â, le remplacer (comportement standard)
    if (this.hasSelection) {
      console.log('üî§ Remplacement de texte s√©lectionn√© par:', char)
      // Remplacer le texte s√©lectionn√©
      const start = Math.min(this.selectionStart, this.selectionEnd)
      const end = Math.max(this.selectionStart, this.selectionEnd)
      const before = this.currentText.substring(0, start)
      const after = this.currentText.substring(end)

      this.currentText = before + char + after
      this.cursorPosition = start + char.length
      this.clearSelection()
      console.log('üî§ Texte s√©lectionn√© remplac√©:', char)
    } else {
      // Ins√©rer le caract√®re √† la position du curseur (mode normal)
      const before = this.currentText.substring(0, this.cursorPosition)
      const after = this.currentText.substring(this.cursorPosition)

      this.currentText = before + char + after
      this.cursorPosition += char.length
      console.log('üî§ Caract√®re ins√©r√©:', char, 'Nouveau texte:', this.currentText)
    }

    // ‚úÖ APPLIQUER LE WRAPPING AUTOMATIQUE APR√àS INSERTION
    if (char !== '\n') { // Ne pas wrapper si c'est un saut de ligne manuel
      this.applyAutoWrapping()
    }

    // ‚úÖ MISE √Ä JOUR SANS REDIMENSIONNEMENT FORC√â
    console.log('üîÑ APPEL updateDisplay depuis insertText')
    this.updateDisplay()

    console.log('‚úÖ FIN insertText')
  }

  private applyAutoWrapping(): void {
    // ‚úÖ WRAPPING AUTOMATIQUE INTELLIGENT
    const lines = this.currentText.split('\n')
    const newLines: string[] = []

    // Style temporaire pour mesurer le texte
    const tempStyle = new TextStyle({
      fontSize: this.element.bubbleStyle.fontSize,
      fontFamily: this.element.bubbleStyle.fontFamily
    })

    for (const line of lines) {
      if (!line.trim()) {
        newLines.push(line)
        continue
      }

      const words = line.split(' ')
      let currentLine = ''

      for (const word of words) {
        const testLine = currentLine ? currentLine + ' ' + word : word

        // Cr√©er un texte temporaire pour mesurer
        const tempText = new Text({ text: testLine, style: tempStyle })
        tempText.getBounds()
        const lineWidth = tempText.width
        tempText.destroy()

        if (lineWidth <= this.maxLineWidth || currentLine === '') {
          currentLine = testLine
        } else {
          // La ligne est trop longue, commencer une nouvelle ligne
          newLines.push(currentLine)
          currentLine = word
        }
      }

      // Ajouter la derni√®re ligne
      if (currentLine) {
        newLines.push(currentLine)
      }
    }

    // Reconstruire le texte avec les sauts de ligne
    const wrappedText = newLines.join('\n')

    // Mettre √† jour le texte si n√©cessaire
    if (wrappedText !== this.currentText) {
      const oldCursorPos = this.cursorPosition
      this.currentText = wrappedText

      // Ajuster la position du curseur (approximation simple)
      this.cursorPosition = Math.min(oldCursorPos, this.currentText.length)

      console.log('üìù Wrapping automatique appliqu√©:', {
        oldLength: this.currentText.length,
        newLength: wrappedText.length,
        lines: newLines.length
      })
    }
  }

  private deleteCharacter(): void {
    this.ensureSelectionConsistency() // V√©rifier la coh√©rence avant suppression

    if (this.hasSelection) {
      console.log('üóëÔ∏è Suppression de texte s√©lectionn√© avec Backspace')
      // Si texte s√©lectionn√©, supprimer la s√©lection
      const start = Math.min(this.selectionStart, this.selectionEnd)
      const end = Math.max(this.selectionStart, this.selectionEnd)
      const before = this.currentText.substring(0, start)
      const after = this.currentText.substring(end)

      this.currentText = before + after
      this.cursorPosition = start
      this.clearSelection()
    } else if (this.cursorPosition > 0) {
      const before = this.currentText.substring(0, this.cursorPosition - 1)
      const after = this.currentText.substring(this.cursorPosition)

      this.currentText = before + after
      this.cursorPosition--
    }

    // ‚úÖ MISE √Ä JOUR SANS REDIMENSIONNEMENT FORC√â
    this.updateDisplay()
  }

  private deleteCharacterForward(): void {
    this.ensureSelectionConsistency() // V√©rifier la coh√©rence avant suppression

    if (this.hasSelection) {
      console.log('üóëÔ∏è Suppression de texte s√©lectionn√© avec Delete')
      // Si texte s√©lectionn√©, supprimer la s√©lection
      const start = Math.min(this.selectionStart, this.selectionEnd)
      const end = Math.max(this.selectionStart, this.selectionEnd)
      const before = this.currentText.substring(0, start)
      const after = this.currentText.substring(end)

      this.currentText = before + after
      this.cursorPosition = start
      this.clearSelection()
    } else if (this.cursorPosition < this.currentText.length) {
      const before = this.currentText.substring(0, this.cursorPosition)
      const after = this.currentText.substring(this.cursorPosition + 1)

      this.currentText = before + after
    }

    // ‚úÖ MISE √Ä JOUR SANS REDIMENSIONNEMENT FORC√â
    this.updateDisplay()
  }

  private moveCursor(delta: number): void {
    this.clearSelection() // D√©sactiver la s√©lection lors du d√©placement
    this.cursorPosition = Math.max(0, Math.min(this.currentText.length, this.cursorPosition + delta))
    // ‚úÖ SYNCHRONISATION PARFAITE LORS DU MOUVEMENT DU CURSEUR
    this.updateCursorPosition()
  }

  private updateDisplay(): void {
    // ‚úÖ MISE √Ä JOUR SIMPLE DU TEXTE SANS REDIMENSIONNEMENT FORC√â
    const newText = this.currentText || ''

    // Mettre √† jour le texte
    if (this.editableText.text !== newText) {
      this.editableText.text = newText
    }

    // Centrer le texte dans la taille actuelle de la bulle
    this.centerTextPerfectly()

    // Mise √† jour du curseur
    this.updateCursorPosition()

    // Sauvegarde automatique
    this.autoSave()
  }

  private centerTextPerfectly(): void {
    // ‚úÖ SOLUTION SIMPLE : CENTRAGE AVEC ANCHOR
    const { width, height } = this.element.transform

    // 1. Mettre √† jour le style si n√©cessaire
    const optimalStyle = createOptimalTextStyle(
      this.element.bubbleStyle.fontSize,
      this.element.bubbleStyle.fontFamily,
      this.element.bubbleStyle.textColor,
      width,
      height
    )

    this.editableText.style = optimalStyle

    // 2. Forcer le recalcul des dimensions
    this.editableText.getBounds()

    // 3. Centrer avec anchor (solution simple qui marche)
    this.editableText.anchor.set(0.5, 0.5)
    this.editableText.x = width / 2
    this.editableText.y = height / 2

    // 4. S'assurer que le texte est visible
    this.editableText.visible = true
    this.editableText.alpha = 1

    console.log('‚úÖ Texte centr√© simplement:', {
      position: { x: this.editableText.x, y: this.editableText.y },
      bubbleSize: { width, height },
      visible: this.editableText.visible
    })
  }



  private autoSave(): void {
    // ‚úÖ SAUVEGARDE AUTOMATIQUE INTELLIGENTE ET OPTIMIS√âE
    if (this.autoSaveTimer) {
      clearTimeout(this.autoSaveTimer)
    }

    // D√©lai adaptatif bas√© sur la longueur du texte
    const textLength = this.currentText.length
    let saveDelay: number

    if (textLength < 50) {
      saveDelay = 300 // Texte court : sauvegarde rapide
    } else if (textLength < 200) {
      saveDelay = 500 // Texte moyen : sauvegarde standard
    } else {
      saveDelay = 800 // Texte long : sauvegarde moins fr√©quente pour √©viter les ralentissements
    }

    this.autoSaveTimer = window.setTimeout(() => {
      if (this.isActive && this.currentText !== this.element.text) {
        console.log('üíæ Sauvegarde automatique intelligente:', {
          textLength,
          saveDelay,
          preview: this.currentText.substring(0, 50) + (this.currentText.length > 50 ? '...' : '')
        })

        // Mettre √† jour l'√©l√©ment sans fermer l'√©diteur
        this.element.text = this.currentText

        // ‚úÖ PAS DE REDIMENSIONNEMENT AUTOMATIQUE - GARDER LA TAILLE CHOISIE PAR L'UTILISATEUR
      }
    }, saveDelay)
  }

  // ‚úÖ REDIMENSIONNEMENT INTELLIGENT EN HAUTEUR SEULEMENT
  // Ajuste automatiquement la hauteur pour contenir tout le texte
  // Pr√©serve la largeur choisie par l'utilisateur

  private calculateRequiredHeight(): number {
    if (!this.currentText || this.currentText.trim() === '') {
      // Hauteur minimale pour une bulle vide bas√©e sur la taille de police
      const minHeight = Math.max(50, this.element.bubbleStyle.fontSize * 2.5)
      return minHeight
    }

    // ‚úÖ CALCUL PR√âCIS DE LA HAUTEUR AVEC WRAPPING ACTUEL
    const currentWrapWidth = this.editableText.style.wordWrapWidth

    // Cr√©er un texte temporaire avec exactement les m√™mes param√®tres
    const tempText = new Text({
      text: this.currentText,
      style: new TextStyle({
        fontSize: this.element.bubbleStyle.fontSize,
        fontFamily: this.element.bubbleStyle.fontFamily,
        fill: this.element.bubbleStyle.textColor,
        align: 'center',
        wordWrap: true,
        wordWrapWidth: currentWrapWidth,
        breakWords: true,
        lineHeight: this.element.bubbleStyle.fontSize * 1.2
      })
    })

    tempText.getBounds()
    const textHeight = tempText.height
    tempText.destroy()

    // ‚úÖ MARGES VERTICALES DYNAMIQUES BAS√âES SUR LA TAILLE DE LA BULLE
    const bubbleWidth = this.element.transform.width
    let verticalPadding: number

    if (bubbleWidth <= 120) {
      verticalPadding = 20 // Petites bulles : marges r√©duites
    } else if (bubbleWidth <= 200) {
      verticalPadding = 25 // Bulles moyennes : marges standard
    } else if (bubbleWidth <= 300) {
      verticalPadding = 30 // Grandes bulles : marges confortables
    } else {
      verticalPadding = 35 // Tr√®s grandes bulles : marges g√©n√©reuses
    }

    const minHeight = Math.max(50, this.element.bubbleStyle.fontSize * 2.5)
    const requiredHeight = Math.max(minHeight, textHeight + verticalPadding)

    console.log('üìè Hauteur intelligente calcul√©e:', {
      textHeight,
      verticalPadding,
      requiredHeight,
      currentHeight: this.element.transform.height,
      bubbleWidth,
      wrapWidth: currentWrapWidth
    })

    return requiredHeight
  }

  private smartResizeBidirectional(): void {
    console.log('üîß D√âBUT redimensionnement intelligent bidirectionnel')

    const requiredHeight = this.calculateRequiredHeight()
    const currentHeight = this.element.transform.height
    const heightDifference = Math.abs(requiredHeight - currentHeight)

    console.log('üìè Analyse des dimensions:', {
      requiredHeight,
      currentHeight,
      heightDifference,
      needsResize: heightDifference > 2 // Seuil de tol√©rance de 2px pour √©viter les micro-ajustements
    })

    // ‚úÖ REDIMENSIONNEMENT INTELLIGENT AVEC SEUIL DE TOL√âRANCE
    if (heightDifference > 2) {
      console.log('üîß Redimensionnement automatique de la bulle:', {
        from: currentHeight,
        to: requiredHeight,
        difference: requiredHeight - currentHeight,
        reason: requiredHeight > currentHeight ? 'Texte plus long' : 'Texte plus court'
      })

      // ‚úÖ ANIMATION FLUIDE DU REDIMENSIONNEMENT (optionnel)
      const steps = Math.min(5, Math.ceil(heightDifference / 10))
      const stepSize = (requiredHeight - currentHeight) / steps

      let currentStep = 0
      const animateResize = () => {
        if (currentStep < steps) {
          const newHeight = currentHeight + (stepSize * (currentStep + 1))
          this.element.transform.height = newHeight
          this.lastBubbleSize.height = newHeight

          // Recentrer √† chaque √©tape pour un mouvement fluide
          this.centerTextPerfectly()
          this.updateCursorPosition() // ‚úÖ CURSEUR SYNCHRONIS√â √Ä CHAQUE √âTAPE

          currentStep++
          requestAnimationFrame(animateResize)
        } else {
          // Finaliser avec la hauteur exacte
          this.element.transform.height = requiredHeight
          this.lastBubbleSize.height = requiredHeight
          this.centerTextPerfectly()
          this.updateCursorPosition() // ‚úÖ CURSEUR SYNCHRONIS√â √Ä LA FIN
          this.forceImmediateUpdate()

          console.log('‚úÖ Redimensionnement fluide termin√© avec curseur synchronis√©')
        }
      }

      // D√©marrer l'animation ou redimensionnement direct selon la pr√©f√©rence
      if (heightDifference > 20) {
        animateResize() // Animation pour les gros changements
      } else {
        // Redimensionnement direct pour les petits ajustements
        this.element.transform.height = requiredHeight
        this.lastBubbleSize.height = requiredHeight
        this.centerTextPerfectly()
        this.updateCursorPosition() // ‚úÖ CURSEUR SYNCHRONIS√â IMM√âDIATEMENT
        this.forceImmediateUpdate()
      }

      console.log('‚úÖ Hauteur de bulle ajust√©e intelligemment avec curseur synchronis√©')
    } else {
      console.log('‚ÑπÔ∏è Hauteur optimale - pas de redimensionnement n√©cessaire')
      // ‚úÖ M√äME SI PAS DE REDIMENSIONNEMENT, S'ASSURER QUE LE CURSEUR EST CORRECT
      this.updateCursorPosition()
    }

    console.log('‚úÖ FIN redimensionnement intelligent')
  }

  private adaptTextToNewBubbleSize(newWidth: number, newHeight: number): void {
    console.log('üîÑ Adaptation intelligente aux nouvelles dimensions:', {
      newSize: { width: newWidth, height: newHeight },
      currentWrapWidth: this.editableText.style.wordWrapWidth,
      textLength: this.currentText.length
    })

    // ‚úÖ CR√âER LE STYLE OPTIMAL POUR LES NOUVELLES DIMENSIONS
    const optimalStyle = createOptimalTextStyle(
      this.element.bubbleStyle.fontSize,
      this.element.bubbleStyle.fontFamily,
      this.element.bubbleStyle.textColor,
      newWidth,
      newHeight
    )

    const currentWrapWidth = this.editableText.style.wordWrapWidth
    const newWrapWidth = optimalStyle.wordWrapWidth
    const wrapDifference = Math.abs(newWrapWidth - currentWrapWidth)

    // ‚úÖ ADAPTATION INTELLIGENTE DU WRAPPING
    if (wrapDifference > 5) { // Seuil pour √©viter les micro-ajustements
      console.log('üìè Adaptation significative du wrapping:', {
        from: currentWrapWidth,
        to: newWrapWidth,
        difference: wrapDifference,
        reason: newWrapWidth > currentWrapWidth ? 'Bulle √©largie' : 'Bulle r√©tr√©cie'
      })

      // Appliquer le style optimal
      this.editableText.style = optimalStyle

      // ‚úÖ RECALCUL INTELLIGENT DE LA HAUTEUR APR√àS RE-WRAPPING
      const requiredHeight = this.calculateRequiredHeight()
      const heightDifference = Math.abs(requiredHeight - newHeight)

      if (heightDifference > 5) {
        console.log('üìè Ajustement automatique de la hauteur apr√®s re-wrapping:', {
          from: newHeight,
          to: requiredHeight,
          difference: heightDifference,
          reason: requiredHeight > newHeight ? 'Plus de lignes n√©cessaires' : 'Moins de lignes n√©cessaires'
        })

        this.element.transform.height = requiredHeight
        this.lastBubbleSize.height = requiredHeight
      }

      // ‚úÖ SYNCHRONISATION PARFAITE APR√àS ADAPTATION
      this.synchronizeTextAndCursor()

      // ‚úÖ MISE √Ä JOUR OPTIMIS√âE
      this.forceImmediateUpdate()

      console.log('‚úÖ Adaptation compl√®te termin√©e')
    } else {
      console.log('‚ÑπÔ∏è Changement de wrapping minimal - pas d\'adaptation n√©cessaire')
    }
  }

  private forceImmediateUpdate(): void {
    // ‚úÖ FORCER LA MISE √Ä JOUR IMM√âDIATE DE L'AFFICHAGE PIXI
    // Mettre √† jour imm√©diatement l'√©l√©ment avec les nouvelles dimensions
    this.element.text = this.currentText

    // ‚úÖ D√âCLENCHER LA MISE √Ä JOUR VIA LE CALLBACK SI DISPONIBLE
    if (this.onComplete) {
      // Appeler le callback avec le texte actuel pour d√©clencher la mise √† jour
      // Cela force le syst√®me PixiJS √† redessiner la bulle avec les nouvelles dimensions
      console.log('üîÑ D√©clenchement de la mise √† jour imm√©diate via callback')
    }

    // ‚úÖ FORCER LE RENDU PIXI
    if (this.parent && this.parent.parent) {
      const container = this.parent.parent
      if ('getBounds' in container) {
        // Forcer le recalcul des bounds pour d√©clencher le rendu
        container.getBounds()
      }
    }

    console.log('‚úÖ Mise √† jour imm√©diate forc√©e')
  }

  private triggerElementUpdate(): void {
    // ‚úÖ VERSION SIMPLIFI√âE - JUSTE FORCER LA MISE √Ä JOUR
    this.forceImmediateUpdate()
  }

  private updateCursorPosition(): void {
    // ‚úÖ NETTOYAGE ET PR√âPARATION DU CURSEUR
    this.textCursor.clear()
    this.textCursor.visible = true

    // ‚úÖ UTILISER LES DIMENSIONS ACTUELLES DE LA BULLE
    const { width, height } = this.element.transform
    const fontSize = this.element.bubbleStyle.fontSize

    if (!this.currentText || this.currentText.trim() === '') {
      // ‚úÖ CURSEUR PARFAITEMENT CENTR√â POUR BULLE VIDE
      this.textCursor.x = width / 2 - 1 // -1 pour centrer la ligne de 2px
      this.textCursor.y = height / 2 - fontSize / 2
      this.textCursor.rect(0, 0, 2, fontSize)
      this.textCursor.fill({ color: this.element.bubbleStyle.textColor })

      console.log('üéØ Curseur centr√© pour bulle vide:', {
        position: { x: this.textCursor.x, y: this.textCursor.y },
        bubbleCenter: { x: width / 2, y: height / 2 }
      })
      return
    }

    const bubbleCenterX = width / 2
    const bubbleCenterY = height / 2

    // ‚úÖ CALCUL PR√âCIS POUR TEXTE MULTI-LIGNES
    const lines = this.currentText.split('\n')
    const lineHeight = fontSize * 1.2

    // D√©terminer la ligne et position du curseur
    let currentLine = 0
    let positionInLine = this.cursorPosition
    let charCount = 0

    for (let i = 0; i < lines.length; i++) {
      if (charCount + lines[i].length >= this.cursorPosition) {
        currentLine = i
        positionInLine = this.cursorPosition - charCount
        break
      }
      charCount += lines[i].length + 1 // +1 pour le \n
    }

    // ‚úÖ UTILISER EXACTEMENT LE M√äME STYLE QUE LE TEXTE √âDITABLE
    const textBeforeCursor = lines[currentLine].substring(0, positionInLine)
    const currentLineText = lines[currentLine]

    // Cr√©er des textes temporaires avec EXACTEMENT le m√™me style que editableText
    const beforeText = new Text({
      text: textBeforeCursor,
      style: this.editableText.style
    })
    const lineText = new Text({
      text: currentLineText,
      style: this.editableText.style
    })

    beforeText.getBounds()
    lineText.getBounds()

    const beforeWidth = beforeText.width
    const lineWidth = lineText.width

    // ‚úÖ POSITIONNEMENT BAS√â SUR LE CENTRE DE LA BULLE (STABLE)
    // Calculer o√π devrait √™tre le texte centr√©
    const totalTextHeight = this.editableText.height

    // Position X : centre de la bulle - moiti√© de la ligne + largeur avant curseur
    const cursorX = bubbleCenterX - (lineWidth / 2) + beforeWidth

    // Position Y : centre de la bulle - moiti√© de la hauteur totale + ligne courante
    const cursorY = bubbleCenterY - (totalTextHeight / 2) + (currentLine * lineHeight)

    this.textCursor.x = cursorX
    this.textCursor.y = cursorY

    // ‚úÖ DESSINER LE CURSEUR AVEC STYLE ADAPTATIF
    this.textCursor.rect(0, 0, 2, fontSize)
    this.textCursor.fill({ color: this.element.bubbleStyle.textColor })

    console.log('üéØ Curseur positionn√© par rapport au centre de la bulle:', {
      line: currentLine + 1,
      positionInLine,
      cursorPos: { x: cursorX, y: cursorY },
      bubbleCenter: { x: bubbleCenterX, y: bubbleCenterY },
      textMetrics: {
        lineWidth,
        beforeWidth,
        totalHeight: totalTextHeight
      }
    })

    // Nettoyer les objets temporaires
    beforeText.destroy()
    lineText.destroy()
  }

  /**
   * ‚úÖ FONCTION DE SYNCHRONISATION TEXTE-CURSEUR
   * Garantit que le curseur suit le centrage du texte
   */
  private synchronizeTextAndCursor(): void {
    // 1. Centrer le texte
    this.centerTextPerfectly()

    // 2. Positionner le curseur
    this.updateCursorPosition()
  }

  /**
   * ‚úÖ FONCTION DE VALIDATION DU CENTRAGE
   * V√©rifie que le curseur est bien centr√© par rapport au texte
   */
  private validateCursorCentering(): boolean {
    if (!this.currentText || this.currentText.trim() === '') {
      // Pour bulle vide, v√©rifier que le curseur est au centre de la bulle
      const { width, height } = this.element.transform
      const expectedX = width / 2 - 1
      const expectedY = height / 2 - this.element.bubbleStyle.fontSize / 2

      const isCorrect = Math.abs(this.textCursor.x - expectedX) < 2 &&
                       Math.abs(this.textCursor.y - expectedY) < 2

      console.log('üîç Validation curseur bulle vide:', {
        expected: { x: expectedX, y: expectedY },
        actual: { x: this.textCursor.x, y: this.textCursor.y },
        isCorrect
      })

      return isCorrect
    }

    // Pour texte existant, v√©rifier que le curseur suit le centrage du texte
    const textBounds = this.editableText.getBounds()
    const isWithinTextBounds = this.textCursor.x >= textBounds.x - 5 &&
                              this.textCursor.x <= textBounds.x + textBounds.width + 5 &&
                              this.textCursor.y >= textBounds.y - 5 &&
                              this.textCursor.y <= textBounds.y + textBounds.height + 5

    console.log('üîç Validation curseur avec texte:', {
      textBounds,
      cursorPos: { x: this.textCursor.x, y: this.textCursor.y },
      isWithinBounds: isWithinTextBounds
    })

    return isWithinTextBounds
  }

  private startCursorBlink(): void {
    const blink = () => {
      if (!this.isActive) return

      this.textCursor.visible = !this.textCursor.visible
      this.cursorBlinkTimer = window.setTimeout(blink, 500)
    }

    blink()
  }

  private stopCursorBlink(): void {
    if (this.cursorBlinkTimer) {
      clearTimeout(this.cursorBlinkTimer)
      this.cursorBlinkTimer = 0
    }
    this.textCursor.visible = false
  }

  private startResizeWatcher(): void {
    const checkResize = () => {
      if (!this.isActive) return

      const currentSize = this.element.transform
      const widthDiff = Math.abs(currentSize.width - this.lastBubbleSize.width)
      const heightDiff = Math.abs(currentSize.height - this.lastBubbleSize.height)

      // Seuils de tol√©rance pour √©viter les micro-ajustements
      const widthChanged = widthDiff > 2
      const heightChanged = heightDiff > 2

      if (widthChanged || heightChanged) {
        console.log('üìè Redimensionnement intelligent d√©tect√©:', {
          from: this.lastBubbleSize,
          to: { width: currentSize.width, height: currentSize.height },
          differences: { width: widthDiff, height: heightDiff },
          changes: { widthChanged, heightChanged }
        })

        // ‚úÖ ADAPTATION INTELLIGENTE SELON LE TYPE DE CHANGEMENT
        if (widthChanged) {
          console.log('üìê Largeur modifi√©e - adaptation intelligente du wrapping')
          this.adaptTextToNewBubbleSize(currentSize.width, currentSize.height)
        } else if (heightChanged) {
          // ‚úÖ HAUTEUR MODIFI√âE - RECENTRAGE INTELLIGENT
          console.log('üìè Hauteur modifi√©e - recentrage intelligent')
          this.centerTextPerfectly()
          this.updateCursorPosition()
        }

        // Mettre √† jour la taille surveill√©e
        this.lastBubbleSize = {
          width: currentSize.width,
          height: currentSize.height
        }
      }

      // ‚úÖ SURVEILLANCE ADAPTATIVE - Fr√©quence bas√©e sur l'activit√©
      const watchInterval = (widthChanged || heightChanged) ? 30 : 100 // Plus rapide si changements d√©tect√©s
      this.resizeWatcher = window.setTimeout(checkResize, watchInterval)
    }

    checkResize()
  }

  private stopResizeWatcher(): void {
    if (this.resizeWatcher) {
      clearTimeout(this.resizeWatcher)
      this.resizeWatcher = 0
    }
  }

  private clearSelection(): void {
    this.hasSelection = false
    this.selectionStart = 0
    this.selectionEnd = 0
    this.textCursor.visible = true // R√©afficher le curseur
    this.hideSelectionHighlight() // S'assurer que le highlight est cach√©
    console.log('üîÑ S√©lection effac√©e - curseur visible')
  }

  private ensureSelectionConsistency(): void {
    // S'assurer que hasSelection refl√®te toujours l'√©tat r√©el
    const realSelection = this.selectionStart !== this.selectionEnd
    this.hasSelection = realSelection

    // Logs de d√©bogage pour tracer les probl√®mes
    console.log('üîç √âtat de s√©lection:', {
      hasSelection: this.hasSelection,
      selectionStart: this.selectionStart,
      selectionEnd: this.selectionEnd,
      selectedText: this.hasSelection ? this.getSelectedText() : 'aucun'
    })
  }

  // ‚úÖ OP√âRATIONS DE PRESSE-PAPIERS STANDARD
  private async copySelectedText(): Promise<void> {
    if (!this.hasSelection) {
      console.log('üö´ Aucun texte s√©lectionn√© pour copier')
      return
    }

    const start = Math.min(this.selectionStart, this.selectionEnd)
    const end = Math.max(this.selectionStart, this.selectionEnd)
    const selectedText = this.currentText.substring(start, end)

    try {
      await navigator.clipboard.writeText(selectedText)
      console.log('üìã Texte copi√©:', `"${selectedText}"`)
    } catch (error) {
      console.error('‚ùå Erreur lors de la copie:', error)
    }
  }

  private async pasteText(): Promise<void> {
    try {
      const clipboardText = await navigator.clipboard.readText()
      if (clipboardText) {
        this.insertText(clipboardText)
        console.log('üìã Texte coll√©:', `"${clipboardText}"`)
      }
    } catch (error) {
      console.error('‚ùå Erreur lors du collage:', error)
    }
  }

  private async cutSelectedText(): Promise<void> {
    if (!this.hasSelection) {
      console.log('üö´ Aucun texte s√©lectionn√© pour couper')
      return
    }

    // Copier d'abord
    await this.copySelectedText()

    // Puis supprimer le texte s√©lectionn√©
    const start = Math.min(this.selectionStart, this.selectionEnd)
    const end = Math.max(this.selectionStart, this.selectionEnd)
    const before = this.currentText.substring(0, start)
    const after = this.currentText.substring(end)

    this.currentText = before + after
    this.cursorPosition = start
    this.clearSelection()
    this.updateDisplay()

    console.log('‚úÇÔ∏è Texte coup√© et supprim√©')
  }

  private selectAllText(): void {
    if (this.currentText.length === 0) {
      console.log('üö´ Aucun texte √† s√©lectionner')
      return
    }

    this.selectionStart = 0
    this.selectionEnd = this.currentText.length
    this.hasSelection = true
    this.cursorPosition = this.currentText.length
    this.updateSelectionDisplay()

    console.log('üìù Tout le texte s√©lectionn√©:', `"${this.currentText}"`)
  }

  private disableBubbleManipulation(): void {
    console.log('üö´ D√âSACTIVATION COMPL√àTE de la manipulation pendant l\'√©dition')

    // ‚úÖ D√âSACTIVER TOUS LES HANDLES ET LA S√âLECTION
    const app = this.element.pixiApp
    if (app) {
      // D√©sactiver compl√®tement la s√©lection de la bulle
      if (app.clearSelection) {
        app.clearSelection()
      }

      // D√©sactiver tous les handles dans la sc√®ne
      if (app.stage) {
        this.disableHandlesInContainer(app.stage)
      }

      // D√©sactiver le syst√®me de s√©lection global
      if (app.setSelectedElement) {
        app.setSelectedElement(null)
      }
    }

    // ‚úÖ D√âSACTIVER AUSSI LES √âV√âNEMENTS GLOBAUX DE MANIPULATION
    this.disableGlobalManipulationEvents()

    console.log('‚úÖ TOUS les handles, cadres et manipulation d√©sactiv√©s')
  }

  private disableHandlesInContainer(container: any): void {
    if (!container || !container.children) return

    container.children.forEach((child: any) => {
      // ‚úÖ D√âSACTIVER AGRESSIVEMENT TOUS LES √âL√âMENTS DE MANIPULATION
      const isManipulationElement = child.name && (
        child.name.toLowerCase().includes('handle') ||
        child.name.toLowerCase().includes('resize') ||
        child.name.toLowerCase().includes('corner') ||
        child.name.toLowerCase().includes('edge') ||
        child.name.toLowerCase().includes('move') ||
        child.name.toLowerCase().includes('drag') ||
        child.name.toLowerCase().includes('selection') ||
        child.name.toLowerCase().includes('manipul') ||
        child.name.toLowerCase().includes('tail') ||
        child.name.toLowerCase().includes('bubble') ||
        child.name.toLowerCase().includes('frame') ||
        child.name.toLowerCase().includes('border') ||
        child.name.toLowerCase().includes('outline')
      )

      if (isManipulationElement) {
        // Sauvegarder l'√©tat original pour la restauration
        if (!child._originalState) {
          child._originalState = {
            visible: child.visible,
            eventMode: child.eventMode,
            interactive: child.interactive,
            cursor: child.cursor
          }
        }

        // D√âSACTIVATION COMPL√àTE
        child.visible = false
        child.eventMode = 'none'
        child.interactive = false
        child.cursor = 'default'
        console.log('üö´ √âl√©ment de manipulation d√©sactiv√©:', child.name)
      }

      // ‚úÖ D√âSACTIVER AUSSI TOUS LES CONTAINERS INTERACTIFS (sauf notre √©diteur)
      if (child !== this && child !== this.editableText && child.eventMode && child.eventMode !== 'none') {
        if (!child._originalState) {
          child._originalState = {
            eventMode: child.eventMode,
            interactive: child.interactive,
            cursor: child.cursor
          }
        }
        child.eventMode = 'none'
        child.interactive = false
        child.cursor = 'text' // Curseur texte pendant l'√©dition
      }

      // R√©cursion pour les enfants
      if (child.children && child.children.length > 0) {
        this.disableHandlesInContainer(child)
      }
    })
  }

  private disableGlobalManipulationEvents(): void {
    // ‚úÖ D√âSACTIVER LES √âV√âNEMENTS GLOBAUX DE MANIPULATION
    const canvas = document.querySelector('canvas')
    if (canvas) {
      canvas.style.pointerEvents = 'none'
      // R√©activer seulement pour le texte
      setTimeout(() => {
        canvas.style.pointerEvents = 'auto'
      }, 100)
    }
  }

  private enableBubbleManipulation(): void {
    // ‚úÖ R√âACTIVER TOUS LES HANDLES DE MANIPULATION
    const app = this.element.pixiApp
    if (app && app.stage) {
      this.enableHandlesInContainer(app.stage)
    }

    // ‚úÖ R√âACTIVER LES √âV√âNEMENTS GLOBAUX
    this.enableGlobalManipulationEvents()

    console.log('‚úÖ TOUS les handles et √©v√©nements de manipulation r√©activ√©s apr√®s l\'√©dition')
  }

  private enableHandlesInContainer(container: any): void {
    if (!container || !container.children) return

    container.children.forEach((child: any) => {
      // R√©activer TOUS les √©l√©ments qui ressemblent √† des handles
      if (child.name && (
        child.name.toLowerCase().includes('handle') ||
        child.name.toLowerCase().includes('resize') ||
        child.name.toLowerCase().includes('corner') ||
        child.name.toLowerCase().includes('edge') ||
        child.name.toLowerCase().includes('move') ||
        child.name.toLowerCase().includes('drag') ||
        child.name.toLowerCase().includes('selection') ||
        child.name.toLowerCase().includes('manipul') ||
        child.name.toLowerCase().includes('tail') ||
        child.name.toLowerCase().includes('bubble')
      )) {
        // Restaurer l'√©tat original si disponible
        if (child._originalState) {
          child.visible = child._originalState.visible
          child.eventMode = child._originalState.eventMode
          child.interactive = child._originalState.interactive
          child.cursor = child._originalState.cursor
          delete child._originalState
        } else {
          // Valeurs par d√©faut si pas d'√©tat sauvegard√©
          child.visible = true
          child.eventMode = 'static'
          child.interactive = true
          child.cursor = 'pointer'
        }
        console.log('‚úÖ Handle r√©activ√©:', child.name)
      }

      // R√©activer aussi les containers de bulles
      if (child !== this && child !== this.editableText) {
        if (child._originalState) {
          child.eventMode = child._originalState.eventMode
          child.cursor = child._originalState.cursor
          delete child._originalState
        } else if (child.eventMode !== undefined) {
          child.eventMode = 'static'
        }
      }

      // R√©cursion pour les enfants
      if (child.children && child.children.length > 0) {
        this.enableHandlesInContainer(child)
      }
    })
  }

  private enableGlobalManipulationEvents(): void {
    // ‚úÖ R√âACTIVER LES √âV√âNEMENTS GLOBAUX DE MANIPULATION
    const canvas = document.querySelector('canvas')
    if (canvas) {
      canvas.style.pointerEvents = 'auto'
    }
  }





  private handleTextHover(): void {
    // ‚úÖ FORCER LE CURSEUR TEXTE (I-BEAM) PENDANT L'√âDITION
    document.body.style.cursor = 'text !important'
    document.documentElement.style.cursor = 'text !important'

    // Forcer aussi sur l'√©l√©ment canvas si disponible
    const canvas = document.querySelector('canvas')
    if (canvas) {
      canvas.style.cursor = 'text !important'
    }

    console.log('üñ±Ô∏è Curseur texte (I-beam) activ√©')
  }

  private handleTextOut(): void {
    // ‚úÖ REMETTRE LE CURSEUR NORMAL SEULEMENT SI ON SORT DU TEXTE
    if (this.isActive) {
      // Garder le curseur texte tant qu'on est en mode √©dition
      document.body.style.cursor = 'text'
      document.documentElement.style.cursor = 'text'

      const canvas = document.querySelector('canvas')
      if (canvas) {
        canvas.style.cursor = 'text'
      }
    } else {
      // Remettre le curseur par d√©faut si l'√©dition est termin√©e
      document.body.style.cursor = 'default'
      document.documentElement.style.cursor = 'default'

      const canvas = document.querySelector('canvas')
      if (canvas) {
        canvas.style.cursor = 'default'
      }
    }
  }

  private forceTextCursor(): void {
    // ‚úÖ FORCER LE CURSEUR TEXTE DE MANI√àRE SIMPLE ET EFFICACE
    document.body.style.cursor = 'text'

    const canvas = document.querySelector('canvas')
    if (canvas) {
      canvas.style.cursor = 'text'
    }

    // Style CSS simple pour forcer le curseur texte
    const style = document.createElement('style')
    style.id = 'text-editor-cursor-override'
    style.textContent = `
      canvas {
        cursor: text !important;
      }
      body {
        cursor: text !important;
      }
    `
    document.head.appendChild(style)

    console.log('üñ±Ô∏è Curseur texte activ√© pendant l\'√©dition')
  }

  private restoreNormalCursor(): void {
    // ‚úÖ RESTAURER LE CURSEUR NORMAL APR√àS L'√âDITION
    document.body.style.cursor = 'default'

    const canvas = document.querySelector('canvas')
    if (canvas) {
      canvas.style.cursor = 'default'
    }

    // Supprimer le style CSS global
    const style = document.getElementById('text-editor-cursor-override')
    if (style) {
      style.remove()
    }

    console.log('üñ±Ô∏è Curseur normal restaur√© apr√®s l\'√©dition')
  }

  private handleTextClick(e: any): void {
    console.log('üñ±Ô∏è handleTextClick appel√© - D√âBUT')

    // ‚úÖ EMP√äCHER COMPL√àTEMENT LA PROPAGATION VERS LE GESTIONNAIRE GLOBAL
    e.stopPropagation()
    e.stopImmediatePropagation()
    e.preventDefault()

    // ‚úÖ GESTION DES CLICS MULTIPLES (SIMPLE, DOUBLE, TRIPLE)
    const currentTime = Date.now()
    const timeSinceLastClick = currentTime - (this.lastClickTime || 0)
    this.lastClickTime = currentTime

    // ‚úÖ CALCUL PR√âCIS POUR LIGNES MULTIPLES
    const localPos = e.getLocalPosition(this.editableText)
    console.log('üéØ Position locale du clic:', localPos)

    const clickPosition = this.getTextPositionFromCoords(localPos.x, localPos.y)

    console.log('üéØ Position calcul√©e:', {
      clickPosition,
      timeSinceLastClick,
      textLength: this.currentText.length,
      localPos
    })

    // ‚úÖ GESTION DES CLICS MULTIPLES
    if (timeSinceLastClick < 300) { // Double-clic
      if (timeSinceLastClick < 150) { // Triple-clic tr√®s rapide
        this.handleTripleClick()
        return
      } else {
        this.handleDoubleClick(clickPosition)
        return
      }
    }

    // ‚úÖ CLIC SIMPLE - POSITIONNER LE CURSEUR ET PR√âPARER LA S√âLECTION
    this.cursorPosition = clickPosition
    this.clearSelection()
    this.updateCursorPosition()

    // ‚úÖ PR√âPARER LA S√âLECTION PAR GLISSEMENT
    this.isSelecting = true
    this.selectionStart = clickPosition
    this.selectionEnd = clickPosition

    console.log('üñ±Ô∏è Clic simple - curseur positionn√© √†:', clickPosition)
  }

  private handleDoubleClick(clickPosition: number): void {
    // ‚úÖ DOUBLE-CLIC = S√âLECTIONNER LE MOT
    const wordBounds = this.getWordBounds(clickPosition)
    if (wordBounds) {
      this.selectionStart = wordBounds.start
      this.selectionEnd = wordBounds.end
      this.hasSelection = true
      this.cursorPosition = wordBounds.end
      this.updateSelectionDisplay()
      console.log('üñ±Ô∏è Double-clic - mot s√©lectionn√©:', this.currentText.substring(wordBounds.start, wordBounds.end))
    }
  }

  private handleTripleClick(): void {
    // ‚úÖ TRIPLE-CLIC = S√âLECTIONNER TOUT LE TEXTE
    this.selectAllText()
    console.log('üñ±Ô∏è Triple-clic - tout le texte s√©lectionn√©')
  }

  private getWordBounds(position: number): { start: number, end: number } | null {
    if (!this.currentText || position < 0 || position > this.currentText.length) {
      return null
    }

    // Trouver le d√©but du mot
    let start = position
    while (start > 0 && /\w/.test(this.currentText[start - 1])) {
      start--
    }

    // Trouver la fin du mot
    let end = position
    while (end < this.currentText.length && /\w/.test(this.currentText[end])) {
      end++
    }

    return start < end ? { start, end } : null
  }

  private handleTextMove(e: any): void {
    console.log('üñ±Ô∏è handleTextMove appel√© - isSelecting:', this.isSelecting)

    if (!this.isSelecting) {
      console.log('üö´ Pas en mode s√©lection - ignor√©')
      return
    }

    const localPos = e.getLocalPosition(this.editableText)
    const movePosition = this.getTextPositionFromCoords(localPos.x, localPos.y)

    console.log('üñ±Ô∏è Mouvement d√©tect√©:', {
      localPos,
      movePosition,
      selectionStart: this.selectionStart,
      oldSelectionEnd: this.selectionEnd
    })

    this.selectionEnd = movePosition

    // ‚úÖ METTRE √Ä JOUR L'AFFICHAGE DE LA S√âLECTION
    this.updateSelectionDisplay()

    if (this.hasSelection) {
      console.log('‚úÖ S√©lection activ√©e par mouvement')
    }
  }

  private handleTextRelease(_e: any): void {
    console.log('üñ±Ô∏è handleTextRelease appel√©')
    this.isSelecting = false

    // ‚úÖ METTRE √Ä JOUR L'√âTAT DE S√âLECTION BAS√â SUR LES POSITIONS
    this.updateSelectionDisplay()

    if (this.hasSelection) {
      const selectedText = this.getSelectedText()
      this.cursorPosition = this.selectionEnd // Positionner le curseur √† la fin de la s√©lection
      console.log('üìù Texte s√©lectionn√©:', selectedText)
    } else {
      console.log('üñ±Ô∏è Pas de s√©lection - positionnement du curseur')
      this.updateCursorPosition()
    }
  }

  private updateSelectionDisplay(): void {
    // ‚úÖ CALCULER L'√âTAT DE S√âLECTION BAS√â SUR LES POSITIONS
    const hasRealSelection = this.selectionStart !== this.selectionEnd
    this.hasSelection = hasRealSelection

    if (!hasRealSelection) {
      this.textCursor.visible = true
      this.hideSelectionHighlight()
      console.log('üé® Pas de s√©lection - curseur visible')
      return
    }

    // ‚úÖ S√âLECTION ACTIVE
    this.textCursor.visible = false
    this.showSelectionHighlight()

    const selectedText = this.getSelectedText()
    console.log('üé® S√©lection active:', {
      start: this.selectionStart,
      end: this.selectionEnd,
      selectedText: `"${selectedText}"`
    })
  }

  private showSelectionHighlight(): void {
    // ‚úÖ HIGHLIGHT PR√âCIS DU TEXTE S√âLECTIONN√â UNIQUEMENT
    if (!this.selectionHighlight) {
      this.selectionHighlight = new Graphics()
      this.addChild(this.selectionHighlight)
    }

    this.selectionHighlight.clear()

    const start = Math.min(this.selectionStart, this.selectionEnd)
    const end = Math.max(this.selectionStart, this.selectionEnd)

    if (start === end) return

    // ‚úÖ CALCUL PR√âCIS DES POSITIONS DE CARACT√àRES
    const lines = this.currentText.split('\n')
    const lineHeight = this.element.bubbleStyle.fontSize * 1.2
    const fontSize = this.element.bubbleStyle.fontSize

    let charCount = 0
    let currentY = this.editableText.y - (this.editableText.height / 2)

    for (let lineIndex = 0; lineIndex < lines.length; lineIndex++) {
      const line = lines[lineIndex]
      const lineStart = charCount
      const lineEnd = charCount + line.length

      // V√©rifier si cette ligne contient une partie de la s√©lection
      if (start <= lineEnd && end >= lineStart) {
        const selectionStartInLine = Math.max(0, start - lineStart)
        const selectionEndInLine = Math.min(line.length, end - lineStart)

        if (selectionStartInLine < selectionEndInLine) {
          // Calculer les positions X pr√©cises
          const textBeforeSelection = line.substring(0, selectionStartInLine)
          const selectedText = line.substring(selectionStartInLine, selectionEndInLine)

          // Mesurer les largeurs
          const beforeWidth = this.measureTextWidth(textBeforeSelection)
          const selectedWidth = this.measureTextWidth(selectedText)
          const lineWidth = this.measureTextWidth(line)

          // Position X centr√©e
          const lineStartX = this.editableText.x - (lineWidth / 2)
          const highlightX = lineStartX + beforeWidth
          const highlightY = currentY

          // Dessiner le rectangle de s√©lection pr√©cis
          this.selectionHighlight.rect(highlightX, highlightY, selectedWidth, fontSize)
          this.selectionHighlight.fill({ color: 0x4A90E2, alpha: 0.4 }) // Bleu s√©lection standard
        }
      }

      charCount += line.length + 1 // +1 pour le \n
      currentY += lineHeight
    }

    console.log('üé® Highlight pr√©cis affich√© pour s√©lection:', { start, end })
  }

  private measureTextWidth(text: string): number {
    if (!text) return 0

    const measureText = new Text({
      text: text,
      style: this.editableText.style
    })
    measureText.getBounds()
    const width = measureText.width
    measureText.destroy()
    return width
  }

  private hideSelectionHighlight(): void {
    if (this.selectionHighlight) {
      this.selectionHighlight.clear()
    }
  }

  private getSelectedText(): string {
    if (!this.hasSelection) return ''

    const start = Math.min(this.selectionStart, this.selectionEnd)
    const end = Math.max(this.selectionStart, this.selectionEnd)

    return this.currentText.substring(start, end)
  }

  private getTextPositionFromCoords(x: number, y: number): number {
    // ‚úÖ CALCUL PR√âCIS AVEC COORDONN√âES PARFAITEMENT SYNCHRONIS√âES
    if (!this.currentText) return 0

    console.log('üéØ Calcul position curseur - Coordonn√©es locales:', { x, y })

    // ‚úÖ UTILISER EXACTEMENT LE M√äME SYST√àME QUE updateCursorPosition
    let bestPosition = 0
    let bestDistance = Infinity

    // R√©cup√©rer les coordonn√©es exactes du texte centr√© (m√™me r√©f√©rence que updateCursorPosition)
    const textCenterX = this.editableText.x
    const textCenterY = this.editableText.y
    const totalTextHeight = this.editableText.height

    // Tester chaque position possible dans tout le texte
    for (let i = 0; i <= this.currentText.length; i++) {
      // Utiliser EXACTEMENT la m√™me logique que updateCursorPosition
      const lines = this.currentText.split('\n')
      const lineHeight = this.element.bubbleStyle.fontSize * 1.2

      // Trouver sur quelle ligne se trouve cette position
      let currentLine = 0
      let positionInLine = i
      let charCount = 0

      for (let lineIdx = 0; lineIdx < lines.length; lineIdx++) {
        if (charCount + lines[lineIdx].length >= i) {
          currentLine = lineIdx
          positionInLine = i - charCount
          break
        }
        charCount += lines[lineIdx].length + 1 // +1 pour le \n
      }

      // Calculer la position X dans la ligne courante avec EXACTEMENT le m√™me style
      const textBeforeCursor = lines[currentLine].substring(0, positionInLine)
      const currentLineText = lines[currentLine]

      const beforeText = new Text({
        text: textBeforeCursor,
        style: this.editableText.style // EXACTEMENT le m√™me style
      })

      const lineText = new Text({
        text: currentLineText,
        style: this.editableText.style // EXACTEMENT le m√™me style
      })

      beforeText.getBounds()
      lineText.getBounds()

      const beforeWidth = beforeText.width
      const lineWidth = lineText.width

      // ‚úÖ UTILISER EXACTEMENT LA M√äME FORMULE QUE updateCursorPosition
      const localCursorX = textCenterX - (lineWidth / 2) + beforeWidth
      const localCursorY = textCenterY - (totalTextHeight / 2) + (currentLine * lineHeight)

      // Convertir en coordonn√©es locales relatives au texte √©ditable
      const relativeX = localCursorX - textCenterX
      const relativeY = localCursorY - textCenterY

      // Distance entre le clic et cette position de curseur
      const distance = Math.sqrt(Math.pow(x - relativeX, 2) + Math.pow(y - relativeY, 2))

      if (distance < bestDistance) {
        bestDistance = distance
        bestPosition = i
      }

      beforeText.destroy()
      lineText.destroy()
    }

    console.log('‚úÖ Position trouv√©e avec syst√®me synchronis√©:', {
      position: bestPosition,
      distance: bestDistance,
      textCenter: { x: textCenterX, y: textCenterY },
      clickCoords: { x, y }
    })

    return bestPosition
  }

  private finishEditing(): void {
    console.log('üî§ Fin √©dition native - Texte final:', this.currentText)

    this.isActive = false
    this.stopCursorBlink()

    // ‚úÖ NETTOYER LA VARIABLE GLOBALE
    if (activeEditor === this) {
      activeEditor = null
    }

    // ‚úÖ R√âACTIVER LA MANIPULATION DES BULLES
    this.enableBubbleManipulation()

    // ‚úÖ RESTAURER LE CURSEUR NORMAL
    this.restoreNormalCursor()

    // ‚úÖ NETTOYAGE COMPLET DES √âV√âNEMENTS
    this.cleanupEventListeners()

    // ‚úÖ SAUVEGARDE IMM√âDIATE ET FINALE - GESTION UNIFI√âE DU TEXTE
    const finalText = this.currentText.trim() || 'Nouveau texte...'
    this.element.text = finalText

    // ‚úÖ METTRE √Ä JOUR LE TEXTE ORIGINAL AVEC LE CONTENU FINAL ET CENTRAGE
    this.originalText.text = finalText

    // ‚úÖ CENTRAGE PARFAIT DU TEXTE FINAL
    this.centerOriginalText()
    this.originalText.visible = true

    console.log('üíæ Texte sauvegard√©, centr√© et affich√©:', finalText)

    // Appeler le callback avec le nouveau texte
    this.onComplete(finalText)

    // Se supprimer du parent proprement
    if (this.parent) {
      this.parent.removeChild(this)
    }

    this.destroy()
  }

  private centerOriginalText(): void {
    // ‚úÖ CENTRAGE MANUEL RADICAL POUR LE TEXTE FINAL
    const { width, height } = this.element.transform

    // ‚úÖ APPLIQUER LE M√äME CENTRAGE MANUEL QUE L'√âDITEUR
    this.applyManualCenteringToText(this.originalText, width, height)

    console.log('üéØ Texte final centr√© avec centrage MANUEL RADICAL')
  }

  /**
   * üîß CENTRAGE MANUEL POUR N'IMPORTE QUEL TEXTE
   * Version g√©n√©rique de applyManualCentering pour d'autres objets Text
   */
  private applyManualCenteringToText(textElement: Text, bubbleWidth: number, bubbleHeight: number): void {
    console.log('üîß Application du centrage manuel √† un texte externe')

    // ‚úÖ ABANDONNER L'ANCHOR POUR UN CONTR√îLE TOTAL
    textElement.anchor.set(0, 0)

    // ‚úÖ CALCULER LA POSITION MANUELLE
    const position = this.calculateManualCenterPositionForText(textElement, bubbleWidth, bubbleHeight)

    // ‚úÖ APPLIQUER LA POSITION
    textElement.x = position.x
    textElement.y = position.y

    // ‚úÖ GARANTIR LA VISIBILIT√â
    textElement.visible = true
    textElement.alpha = 1

    console.log('‚úÖ Centrage manuel appliqu√© au texte externe:', {
      position,
      textPreview: textElement.text.substring(0, 30) + (textElement.text.length > 30 ? '...' : '')
    })
  }

  /**
   * üìê CALCUL DE POSITION POUR N'IMPORTE QUEL TEXTE
   */
  private calculateManualCenterPositionForText(textElement: Text, bubbleWidth: number, bubbleHeight: number): { x: number, y: number } {
    if (!textElement.text || textElement.text.trim() === '') {
      return {
        x: bubbleWidth / 2,
        y: bubbleHeight / 2 - this.element.bubbleStyle.fontSize / 2
      }
    }

    // ‚úÖ MESURE AVEC TEXTE TEMPORAIRE
    const tempText = new Text({
      text: textElement.text,
      style: textElement.style
    })

    tempText.getBounds()
    const textWidth = tempText.width
    const textHeight = tempText.height
    tempText.destroy()

    return {
      x: (bubbleWidth - textWidth) / 2,
      y: (bubbleHeight - textHeight) / 2
    }
  }

  private finishEditingAndDeselect(): void {
    console.log('üî§ Fin √©dition ET d√©s√©lection de la bulle')

    // ‚úÖ D'ABORD TERMINER L'√âDITION NORMALEMENT
    this.finishEditing()

    // ‚úÖ PUIS D√âS√âLECTIONNER LA BULLE
    // D√©clencher la d√©s√©lection via l'application PixiJS
    if (this.element.pixiApp && this.element.pixiApp.setSelectedElement) {
      this.element.pixiApp.setSelectedElement(null)
      console.log('‚úÖ Bulle d√©s√©lectionn√©e apr√®s fin d\'√©dition')
    }
  }

  private cleanupEventListeners(): void {
    if (this.keyboardListener) {
      window.removeEventListener('keydown', this.keyboardListener)
      this.keyboardListener = undefined
    }

    if (this.clickListener) {
      window.removeEventListener('click', this.clickListener, true)
      this.clickListener = undefined
    }

    // ‚úÖ ARR√äTER LA SURVEILLANCE DU REDIMENSIONNEMENT
    this.stopResizeWatcher()
  }

  private cancelEditing(): void {
    console.log('üî§ √âdition annul√©e')

    this.isActive = false
    this.stopCursorBlink()

    // ‚úÖ NETTOYAGE COMPLET DES √âV√âNEMENTS
    this.cleanupEventListeners()

    // Remettre le texte original visible SANS sauvegarder
    this.originalText.visible = true

    // Se supprimer du parent sans sauvegarder
    if (this.parent) {
      this.parent.removeChild(this)
    }

    this.destroy()
  }

  public destroy(): void {
    this.stopCursorBlink()

    // ‚úÖ NETTOYER TOUS LES TIMERS
    if (this.autoSaveTimer) {
      clearTimeout(this.autoSaveTimer)
      this.autoSaveTimer = 0
    }

    // ‚úÖ NETTOYER LE HIGHLIGHT DE S√âLECTION
    if (this.selectionHighlight) {
      this.selectionHighlight.destroy()
      this.selectionHighlight = undefined
    }

    if (this.keyboardListener) {
      window.removeEventListener('keydown', this.keyboardListener)
    }

    if (this.clickListener) {
      window.removeEventListener('click', this.clickListener, true)
    }

    super.destroy()
  }
}
