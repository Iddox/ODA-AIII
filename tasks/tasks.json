{
  "meta": {
    "projectName": "MANGAKA AI",
    "version": "1.0.0",
    "source": "project_prd.md and feature specifications",
    "description": "Tasks generated from PRD for MANGAKA AI - Plateforme SaaS de création de manga avec IA",
    "totalTasksGenerated": 24,
    "tasksIncluded": 24,
    "lastUpdated": "2024-12-19",
    "techStack": "Next.js 14+, Supabase, Xai Grok 2 API, Tailwind CSS",
    "targetAudience": "Aspirants mangakas 16-25 ans"
  },
  "tasks": [
    {
      "id": 1,
      "title": "Setup Infrastructure & Development Environment",
      "description": "Initialiser l'environnement de développement complet avec Next.js, Supabase et configuration Xai API",
      "status": "todo",
      "dependencies": [],
      "priority": "high",
      "details": "Configuration complète selon architecture définie dans ../Agentic-Coding-Framework/02_AI-DOCS/Architecture/architecture.md. Inclut:\n- Next.js 14+ avec App Router et TypeScript\n- Supabase project setup avec auth, database, storage\n- Configuration Xai Grok 2 API credentials\n- Tailwind CSS avec design system MANGAKA AI\n- Référence conventions: ../Agentic-Coding-Framework/02_AI-DOCS/Conventions/coding_conventions.md",
      "testStrategy": "Vérifier que l'app Next.js démarre sans erreur, connexion Supabase fonctionnelle, variables d'environnement correctement configurées",
      "estimatedEffort": "6h",
      "actualEffort": null,
      "assignee": "AI-Agent",
      "labels": ["infrastructure", "setup", "backend", "frontend"],
      "dueDate": "2024-12-20",
      "codeContextPaths": ["package.json", "next.config.js", "tailwind.config.js", ".env.local"],
      "complexityScore": 6,
      "recommendedSubtasks": 4,
      "subtasks": [
        {
          "id": "1.1",
          "title": "Initialize Next.js Project with TypeScript",
          "description": "Créer projet Next.js 14+ avec App Router et configuration TypeScript",
          "status": "todo",
          "dependencies": [],
          "priority": "high",
          "details": "npx create-next-app@latest mangaka-ai --typescript --tailwind --eslint --app --src-dir --import-alias '@/*'",
          "testStrategy": "npm run dev démarre sans erreur, TypeScript compilation OK",
          "subtasks": []
        },
        {
          "id": "1.2",
          "title": "Configure Supabase Integration",
          "description": "Setup Supabase project et configuration SDK",
          "status": "todo",
          "dependencies": ["1.1"],
          "priority": "high",
          "details": "Créer projet Supabase, installer @supabase/supabase-js, configurer auth helpers Next.js, setup variables environnement",
          "testStrategy": "Connexion Supabase réussie, auth middleware fonctionnel",
          "subtasks": []
        },
        {
          "id": "1.3",
          "title": "Setup Xai Grok 2 API Configuration",
          "description": "Configurer intégration API Xai pour génération d'images",
          "status": "todo",
          "dependencies": ["1.2"],
          "priority": "high",
          "details": "Configuration API key Xai, setup Edge Function pour proxy API calls, gestion rate limiting",
          "testStrategy": "Test call API Xai réussi via Edge Function",
          "subtasks": []
        },
        {
          "id": "1.4",
          "title": "Configure Tailwind Design System",
          "description": "Setup Tailwind avec tokens design MANGAKA AI",
          "status": "todo",
          "dependencies": ["1.1"],
          "priority": "medium",
          "details": "Configuration tailwind.config.js selon ../Agentic-Coding-Framework/02_AI-DOCS/Conventions/design_conventions.md - palette noir/rouge, fonts manga, spacing système",
          "testStrategy": "Classes Tailwind custom fonctionnelles, design tokens appliqués",
          "subtasks": []
        }
      ]
    },
    {
      "id": 2,
      "title": "Database Schema & Authentication Setup",
      "description": "Créer schéma base de données complet et système d'authentification utilisateurs",
      "status": "todo",
      "dependencies": [1],
      "priority": "high",
      "details": "Implémentation selon spécifications FEAT-001 dans ../Agentic-Coding-Framework/03_SPECS/features/feature_spec_FEAT-001.md. Tables: users, manga_projects, generated_images, user_credits. RLS policies pour sécurité multi-tenant.",
      "testStrategy": "Migrations appliquées, RLS policies testées, auth flow complet fonctionnel",
      "estimatedEffort": "8h",
      "actualEffort": null,
      "assignee": "AI-Agent",
      "labels": ["database", "auth", "backend", "security"],
      "dueDate": "2024-12-21",
      "codeContextPaths": ["supabase/migrations/", "src/lib/supabase/"],
      "complexityScore": 7,
      "recommendedSubtasks": 3,
      "subtasks": [
        {
          "id": "2.1",
          "title": "Create Database Schema",
          "description": "Créer tables et relations pour projets manga et génération IA",
          "status": "todo",
          "dependencies": [],
          "priority": "high",
          "details": "Tables selon FEAT-001: generated_images (id, user_id, original_prompt, optimized_prompt, image_url, image_type, credits_used, generation_time_ms, created_at), user_credits (user_id, credits_remaining, credits_total, last_reset, subscription_tier), manga_projects (id, user_id, title, description, pages, created_at, updated_at)",
          "testStrategy": "Migrations SQL valides, contraintes FK respectées, indexes optimaux",
          "subtasks": []
        },
        {
          "id": "2.2",
          "title": "Implement Row Level Security",
          "description": "Configurer RLS policies pour isolation données utilisateurs",
          "status": "todo",
          "dependencies": ["2.1"],
          "priority": "high",
          "details": "RLS policies: users voient uniquement leurs projets/images, admin access pour support, policies granulaires par opération (SELECT, INSERT, UPDATE, DELETE)",
          "testStrategy": "Tests isolation données entre utilisateurs, tentatives accès non autorisé bloquées",
          "subtasks": []
        },
        {
          "id": "2.3",
          "title": "Setup Supabase Auth Flow",
          "description": "Configurer authentification complète avec email/password et OAuth",
          "status": "todo",
          "dependencies": ["2.2"],
          "priority": "high",
          "details": "Auth Supabase avec email/password, Google OAuth optionnel, middleware Next.js pour protection routes, gestion sessions",
          "testStrategy": "Inscription/connexion fonctionnelle, protection routes testée, sessions persistantes",
          "subtasks": []
        }
      ]
    },
    {
      "id": 3,
      "title": "FEAT-001: Générateur d'Images Manga/BD Optimisé",
      "description": "Implémenter la fonctionnalité principale de génération d'images IA avec prompts optimisés",
      "status": "todo",
      "dependencies": [2],
      "priority": "high",
      "details": "Implémentation complète selon ../Agentic-Coding-Framework/03_SPECS/features/feature_spec_FEAT-001.md. Interface génération, optimisation prompts, intégration Xai API, gestion crédits, preview résultats.",
      "testStrategy": "Tests end-to-end génération image, validation prompts, gestion erreurs API, décompte crédits correct",
      "estimatedEffort": "16h",
      "actualEffort": null,
      "assignee": "AI-Agent",
      "labels": ["feature", "ai-generation", "frontend", "backend"],
      "dueDate": "2024-12-23",
      "codeContextPaths": ["src/components/generation/", "src/app/api/generate/", "supabase/functions/"],
      "complexityScore": 9,
      "recommendedSubtasks": 5,
      "subtasks": [
        {
          "id": "3.1",
          "title": "Create GenerationPanel Component",
          "description": "Interface utilisateur pour saisie prompts et génération images",
          "status": "todo",
          "dependencies": [],
          "priority": "high",
          "details": "Composant selon design_conventions.md: textarea prompt avec suggestions, sélecteur type (character/background/scene), bouton génération avec loading states, compteur crédits. Design noir/rouge manga, micro-interactions satisfaisantes.",
          "testStrategy": "Interface responsive, états loading/success/error, validation prompts côté client",
          "subtasks": []
        },
        {
          "id": "3.2",
          "title": "Implement Prompt Optimization Engine",
          "description": "Système d'optimisation automatique des prompts utilisateur",
          "status": "todo",
          "dependencies": [],
          "priority": "high",
          "details": "Edge Function pour optimisation: ajout 'manga style, anime art', enhancement qualité 'high quality, detailed, professional', filtrage contenu inapproprié, templates par type d'image",
          "testStrategy": "Prompts optimisés correctement, filtrage NSFW fonctionnel, templates appliqués selon type",
          "subtasks": []
        },
        {
          "id": "3.3",
          "title": "Integrate Xai Grok 2 API",
          "description": "Intégration complète API Xai pour génération images",
          "status": "todo",
          "dependencies": ["3.2"],
          "priority": "high",
          "details": "Edge Function generate-image: appel API Xai avec prompts optimisés, gestion timeout 45s, retry logic (max 3), error handling robuste, monitoring coûts",
          "testStrategy": "Génération images réussie, gestion erreurs API, retry automatique, logs monitoring",
          "subtasks": []
        },
        {
          "id": "3.4",
          "title": "Implement Credits Management System",
          "description": "Système complet de gestion des crédits utilisateur",
          "status": "todo",
          "dependencies": ["3.3"],
          "priority": "high",
          "details": "Vérification crédits avant génération, décompte post-génération réussie, affichage temps réel, gestion freemium (5 crédits) vs pro (100 crédits), reset mensuel",
          "testStrategy": "Décompte crédits correct, blocage si insuffisant, affichage temps réel, reset automatique",
          "subtasks": []
        },
        {
          "id": "3.5",
          "title": "Create ImagePreview Component",
          "description": "Interface d'affichage et gestion des images générées",
          "status": "todo",
          "dependencies": ["3.4"],
          "priority": "medium",
          "details": "Composant preview avec image haute qualité, actions (save, regenerate, share), métadonnées (prompt, timestamp, crédits), animations apparition, design manga élégant",
          "testStrategy": "Affichage images correct, actions fonctionnelles, métadonnées précises, animations fluides",
          "subtasks": []
        }
      ]
    },
    {
      "id": 4,
      "title": "FEAT-002: Créateur de Scènes Combinées",
      "description": "Fonctionnalité de combinaison personnages et décors en scènes cohérentes",
      "status": "todo",
      "dependencies": [3],
      "priority": "high",
      "details": "Système de combinaison d'assets générés en scènes narratives. Interface sélection multiple, prompts de contexte, génération scènes unifiées avec cohérence stylistique.",
      "testStrategy": "Combinaison assets réussie, cohérence stylistique maintenue, interface intuitive",
      "estimatedEffort": "12h",
      "actualEffort": null,
      "assignee": "AI-Agent",
      "labels": ["feature", "scene-creation", "frontend", "backend"],
      "dueDate": "2024-12-25",
      "codeContextPaths": ["src/components/scene-creator/", "src/app/api/combine-scene/"],
      "complexityScore": 8,
      "recommendedSubtasks": 4,
      "subtasks": [
        {
          "id": "4.1",
          "title": "Create Asset Library Component",
          "description": "Interface de sélection et gestion des assets générés",
          "status": "todo",
          "dependencies": [],
          "priority": "high",
          "details": "Grille assets avec filtres (personnages/décors), sélection multiple, preview hover, recherche, tags, organisation par projet",
          "testStrategy": "Filtres fonctionnels, sélection multiple, recherche précise, performance avec nombreux assets",
          "subtasks": []
        },
        {
          "id": "4.2",
          "title": "Implement Scene Combination Logic",
          "description": "Logique backend de combinaison d'assets en scènes",
          "status": "todo",
          "dependencies": ["4.1"],
          "priority": "high",
          "details": "Edge Function combine-scene: fusion prompts assets + contexte scène, appel API Xai avec prompts combinés, maintien cohérence stylistique",
          "testStrategy": "Scènes générées cohérentes, fusion prompts correcte, qualité visuelle maintenue",
          "subtasks": []
        }
      ]
    },
    {
      "id": 5,
      "title": "FEAT-003: Éditeur de Pages Manga (Canvas)",
      "description": "Éditeur visuel type Canva pour assemblage pages manga complètes",
      "status": "todo",
      "dependencies": [4],
      "priority": "high",
      "details": "Éditeur canvas avec Fabric.js pour placement libre d'images, création cases, bulles dialogue, outils mise en page manga professionnelle.",
      "testStrategy": "Éditeur fonctionnel, sauvegarde/chargement, export haute qualité, interface intuitive",
      "estimatedEffort": "20h",
      "actualEffort": null,
      "assignee": "AI-Agent",
      "labels": ["feature", "canvas-editor", "frontend", "complex"],
      "dueDate": "2024-12-28",
      "codeContextPaths": ["src/components/canvas-editor/", "src/lib/canvas/"],
      "complexityScore": 10,
      "recommendedSubtasks": 6,
      "subtasks": [
        {
          "id": "5.1",
          "title": "Setup Fabric.js Canvas Foundation",
          "description": "Configuration base Fabric.js pour éditeur manga",
          "status": "todo",
          "dependencies": [],
          "priority": "high",
          "details": "Installation Fabric.js, wrapper React, canvas responsive, gestion événements, zoom/pan, grille optionnelle",
          "testStrategy": "Canvas fonctionnel, zoom/pan fluide, responsive design, performance optimale",
          "subtasks": []
        },
        {
          "id": "5.2",
          "title": "Implement Panel Creation Tools",
          "description": "Outils création et édition de cases manga",
          "status": "todo",
          "dependencies": ["5.1"],
          "priority": "high",
          "details": "Formes cases (rectangulaires, rondes, irrégulières), redimensionnement, bordures personnalisables, templates cases manga",
          "testStrategy": "Création cases fluide, redimensionnement précis, styles manga authentiques",
          "subtasks": []
        },
        {
          "id": "5.3",
          "title": "Create Speech Bubble System",
          "description": "Système complet de bulles de dialogue manga",
          "status": "todo",
          "dependencies": ["5.2"],
          "priority": "high",
          "details": "Types bulles (dialogue, pensée, cri, narration), texte éditable, positionnement automatique, styles manga variés",
          "testStrategy": "Bulles créées facilement, texte éditable, positionnement intelligent, styles authentiques",
          "subtasks": []
        }
      ]
    },
    {
      "id": 6,
      "title": "FEAT-004: Script Editor Structuré",
      "description": "Interface d'écriture et organisation narrative pour planification manga",
      "status": "todo",
      "dependencies": [3],
      "priority": "medium",
      "details": "Éditeur structuré pour organisation scènes, panels, dialogues. Interface inspirée outils scénarisation avec focus manga.",
      "testStrategy": "Éditeur fonctionnel, sauvegarde auto, export formats multiples, interface intuitive",
      "estimatedEffort": "10h",
      "actualEffort": null,
      "assignee": "AI-Agent",
      "labels": ["feature", "script-editor", "frontend"],
      "dueDate": "2024-12-26",
      "codeContextPaths": ["src/components/script-editor/"],
      "complexityScore": 6,
      "recommendedSubtasks": 3,
      "subtasks": [
        {
          "id": "6.1",
          "title": "Create Script Structure Interface",
          "description": "Interface hiérarchique pour organisation narrative",
          "status": "todo",
          "dependencies": [],
          "priority": "medium",
          "details": "Arborescence chapitres/scènes/panels, drag & drop réorganisation, numérotation automatique, templates structure manga",
          "testStrategy": "Hiérarchie claire, réorganisation fluide, templates utiles, sauvegarde structure",
          "subtasks": []
        }
      ]
    }
  ]
}
